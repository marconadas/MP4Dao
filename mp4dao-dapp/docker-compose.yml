version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mp4dao-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: mp4dao
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mp4dao_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mp4dao-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mp4dao-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mp4dao-network

  # IPFS Node (Optional - para desenvolvimento local)
  ipfs:
    image: ipfs/kubo:latest
    container_name: mp4dao-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"     # P2P
      - "5001:5001"     # API
      - "8080:8080"     # Gateway
    volumes:
      - ipfs_data:/data/ipfs
      - ipfs_staging:/export
    environment:
      - IPFS_PROFILE=server
    networks:
      - mp4dao-network

  # Hardhat Node (Development)
  hardhat:
    build:
      context: ./contracts
      dockerfile: Dockerfile.dev
    container_name: mp4dao-hardhat
    restart: unless-stopped
    ports:
      - "8545:8545"
    volumes:
      - ./contracts:/app
      - /app/node_modules
    networks:
      - mp4dao-network
    profiles:
      - dev

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: mp4dao-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://mp4dao:password@postgres:5432/mp4dao_db
      - REDIS_URL=redis://redis:6379
      - PORT=3001
    depends_on:
      - postgres
      - redis
    networks:
      - mp4dao-network
    profiles:
      - dev

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: mp4dao-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      - backend
    networks:
      - mp4dao-network
    profiles:
      - dev

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: mp4dao-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - mp4dao-network
    profiles:
      - production

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mp4dao-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mp4dao-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mp4dao-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    depends_on:
      - prometheus
    networks:
      - mp4dao-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  ipfs_data:
  ipfs_staging:
  prometheus_data:
  grafana_data:

networks:
  mp4dao-network:
    driver: bridge
